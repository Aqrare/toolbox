import { Signer } from "ethers";
import { NetworkName } from "../../networks/connections/network-connection.types";
import { IResolverProvider } from "../../resolver-providers/resolver-provider.interface";
import { ResolvedResourceType } from "../types/resolved-resource-type";
import { ProviderName } from "../types/resolver-name";
import { IResolvedResource } from "./resolved-resource.interface";
export declare class ResolvedResource implements IResolvedResource {
    constructor(input: {
        fullname: string;
        tld: string;
        type: ResolvedResourceType;
        tokenId: string;
        resolverName: ProviderName | string;
        resolverProvider: IResolverProvider;
        network: NetworkName | string;
        proxyReaderAddress: string;
        proxyWriterAddress: string;
        ownerAddress: string;
        metadataUri: string | undefined;
        imageUrl: string | undefined;
        metadata: any | undefined;
        records: {
            [key: string]: string;
        } | undefined;
        domain?: string | undefined;
    });
    private _metadata;
    get metadata(): any | undefined;
    set metadata(value: any | undefined);
    private _fullname;
    get fullname(): string;
    set fullname(value: string);
    private _tld;
    get tld(): string;
    set tld(value: string);
    private _domain?;
    get domain(): string | undefined;
    set domain(value: string | undefined);
    private _type;
    get type(): ResolvedResourceType;
    set type(value: ResolvedResourceType);
    private _tokenId;
    get tokenId(): string;
    set tokenId(value: string);
    private _resolverName;
    get providerName(): ProviderName | string;
    set providerName(value: ProviderName | string);
    private _resolverProvider;
    get resolverProvider(): IResolverProvider;
    set resolverProvider(value: IResolverProvider);
    private _network;
    get network(): NetworkName | string;
    set network(value: NetworkName | string);
    private _proxyReaderAddress;
    get proxyReaderAddress(): string;
    set proxyReaderAddress(value: string);
    private _proxyWriterAddress;
    get proxyWriterAddress(): string;
    set proxyWriterAddress(value: string);
    private _ownerAddress;
    get ownerAddress(): string;
    set ownerAddress(value: string);
    private _metadataUri;
    get uri(): string | undefined;
    set uri(value: string | undefined);
    private _imageUrl;
    get imageUrl(): string | undefined;
    set imageUrl(value: string | undefined);
    private _records;
    get records(): {
        [key: string]: string;
    } | undefined;
    getRecord(key: string): Promise<string | undefined>;
    getManyRecords(keys: string[]): Promise<string[] | undefined>;
    isApprovedOrOwner(address: string): Promise<boolean>;
    transfer(addressTo: string, signer: Signer): Promise<boolean>;
    setApproved(addessToApprove: string, signer: Signer): Promise<boolean>;
    setRecord(key: string, value: string, signer: Signer): Promise<boolean>;
    setRecords(keys: string[], values: string[], signer: Signer): Promise<boolean>;
    setReverse(signer: Signer): Promise<boolean>;
    refresh(): Promise<IResolvedResource | undefined>;
}
