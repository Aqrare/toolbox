"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultTools = exports.DEFAULT_INFURA_RPC_URL = exports.DEFAULT_RPC_URL = void 0;
exports.DEFAULT_RPC_URL = {
    bsc: "https://bsc-dataseed1.ninicoin.io",
    ethereum: "https://eth-mainnet.public.blastapi.io",
    polygon: "https://rpc-mainnet.matic.quiknode.pro",
    aurora: "https://mainnet.aurora.dev",
    cronos: "https://node.croswap.com/rpc",
    //TEST
    "polygon-mumbai": "https://rpc-mumbai.matic.today",
    hardhat: "http://127.0.0.1:8545/",
    zil: "",
};
//theese urls can only connect to Freename smart contract addresses
exports.DEFAULT_INFURA_RPC_URL = {
    polygon: "https://polygon-mainnet.infura.io/v3/de21d7dc37334e459e15e172ee9d45f2",
    ethereum: "https://mainnet.infura.io/v3/de21d7dc37334e459e15e172ee9d45f2",
    aurora: "https://aurora-mainnet.infura.io/v3/de21d7dc37334e459e15e172ee9d45f2",
    "polygon-mumbai": "",
    bsc: "",
    zil: "",
    hardhat: "",
    cronos: "",
};
class DefaultTools {
    static getDefaultConnection(networkName, options = {}) {
        const { infuraIfAvailable = false } = options;
        let url;
        if (infuraIfAvailable) {
            url = exports.DEFAULT_INFURA_RPC_URL[networkName];
        }
        if (!url) {
            url = exports.DEFAULT_RPC_URL[networkName];
        }
        return {
            networkName: networkName,
            rpcUrl: url,
        };
    }
}
exports.DefaultTools = DefaultTools;
