import { ethers } from "ethers";
import { ConnectionLibrary } from "../../../networks/connections/connection-library";
import { NetworkName } from "../../../networks/connections/network-connection.types";
import { IResolvedResource } from "../../../resolvers/resolved-resource/resolved-resource.interface";
import { MappedName } from "../../../tools/name-tools.types";
import { IResolverProvider } from "../../resolver-provider.interface";
import { BaseResolverProvider } from "../base-resolver-provider";
export declare class FreenameResolverProvider extends BaseResolverProvider implements IResolverProvider {
    constructor(options: {
        connectionLibrary?: ConnectionLibrary;
        testMode?: boolean;
    });
    getRecord(tokenId: string, key: string, network?: NetworkName | string | undefined): Promise<string | undefined>;
    getManyRecords(tokenId: string, keys: string[], network?: NetworkName | string | undefined): Promise<string[] | undefined>;
    setRecord(resource: IResolvedResource, key: string, value: string, signer: ethers.Signer): Promise<boolean>;
    setRecords(resource: IResolvedResource, keys: string[], values: string[], signer: ethers.Signer): Promise<boolean>;
    generateTokenId(mappedName: MappedName): Promise<string | undefined>;
    getNetworkFromName(mappedName: MappedName): Promise<NetworkName | undefined>;
    getRecords(tokenId: string, network?: NetworkName | string | undefined): Promise<{
        [key: string]: string;
    } | undefined>;
    getAllRecordKeys(tokenId: string, network?: NetworkName | string | undefined): Promise<string[] | undefined>;
    getNameFromTokenId(tokenId: string, network?: NetworkName | undefined): Promise<string | undefined>;
}
